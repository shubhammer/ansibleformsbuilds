---
- hosts: localhost
  name: NSW Transport Scheduled SVM Failback
  gather_facts: false
  vars:
    source: &source_login
      hostname: "{{ ProdCluster }}"
      username: "{{ ONTAP_cred.user }}"
      password: "{{ ONTAP_cred.password }}"
      https: true
      validate_certs: false

    destination: &destination_login
      hostname: "{{ DRCluster }}"
      username: "{{ DR_ONTAP_cred.user }}"
      password: "{{ DR_ONTAP_cred.password }}"
      https: true
      validate_certs: false

  collections:
    - netapp.ontap
  tasks:
    #'----------------------------------------------------------------------------
    #' Get the production SVM.
    #' cluster2::> vserver show -vserver vserver1_dr -fields vserver, type, subtype, operational-state, admin-state
    #'----------------------------------------------------------------------------

    - name: Get Source SVM
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - svm/svms
        <<: *source_login
        fields:
          - state,name,subtype
        use_python_keys: true
        parameters:
            name: "{{ source_svm }}"
            state: running
            subtype: default
      register: production_svm

    #'----------------------------------------------------------------------------
    #' Raise an error if the production SVM does not exist.
    #'----------------------------------------------------------------------------

    - name: Production SVM not found
      fail:
        msg: "The production SVM {{ source_svm }} either does not exist or is not in a running state on cluster {{ ProdCluster }}"
      when:
        - production_svm.ontap_info.svm_svms.num_records == '0'

    #'----------------------------------------------------------------------------
    #' Get the DR SVM.
    #' cluster1::> vserver show -vserver vserver1 -fields vserver, type, subtype, operational-state, admin-state
    #'----------------------------------------------------------------------------
    
    - name: Get Destination SVM
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - svm/svms
        <<: *destination_login
        fields:
          - state,name,subtype
        use_python_keys: true
        parameters:
            name: "{{ destination_svm }}"
            state: stopped
            subtype: dp_destination
      register: dr_svm

    #'----------------------------------------------------------------------------
    #' Raise an error if the disaster recovery SVM does not exist.
    #'----------------------------------------------------------------------------

    - name: Disaster Recovery SVM not found
      fail:
        msg: "The disaster recovery SVM {{ destination_svm }} either does not exist or is not in a stopped / subtype: DP_Destination state on cluster {{ DRCluster }}"
      when:
        - dr_svm.ontap_info.svm_svms.num_records == 0
    #'----------------------------------------------------------------------------
    #' Get the SVM's SnapMirror Relationship status.
    #' cluster2::> snapmirror show -destination-path vserver1: -source-path vserver1_dr:
    #'----------------------------------------------------------------------------

    - name: Get SVM SnapMirror Relationship
      netapp.ontap.na_ontap_rest_cli:
        <<: *destination_login
        command: 'snapmirror'
        verb: GET
        params:
         {
            'destination_path':  "{{ destination_svm }}:",
            'source_path': "{{ source_svm }}:",
            'fields': "status,state,policy,schedule,type"
         }
      register: svm_snapmirror
      tags: get_svm_snapmirror

    #'----------------------------------------------------------------------------
    #' Stop the DR SVM.
    #' cluster2::> vserver stop -vserver vserver1_dr
    #'----------------------------------------------------------------------------

    - name: Stop DR SVM
      netapp.ontap.na_ontap_svm:
        state: present
        name: "{{ source_svm }}"
        admin_state: stopped
        <<: *source_login
      when:
        - production_svm is defined
        - production_svm.ontap_info.svm_svms.records[0].state == "running"
        - production_svm.ontap_info.svm_svms.num_records == 1
      tags: stop_dr_svm

    #'----------------------------------------------------------------------------
    #' Wait for the DR SVM to reach a stopped state.
    #' cluster2::> vserver show -vserver vserver1_dr -fields vserver, operational-state, admin-state
    #'----------------------------------------------------------------------------

    - name: Wait DR SVM stopped
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
            - vserver_info
        use_python_keys: true
        parameters:
           name: "{{ source_svm }}"
        fields:
         - state
        <<: *source_login
      register: production_svm_state
      until: production_svm_state.ontap_info.svm_svms.records[0].state == "stopped"
      retries: 60
      delay: 5
      tags: wait_dr_svm_stopped

    #'----------------------------------------------------------------------------
    #' Abort the SVM SnapMirror relationship if it is currently transferring.
    #' cluster1::> snapmirror abort -destination-path vserver1: -source-path vserver1_dr:
    #'----------------------------------------------------------------------------

    - name: SnapMirror Abort
      netapp.ontap.na_ontap_rest_cli:
        command: 'snapmirror/abort'
        verb: PATCH
        params:
          {
            'destination_path': "{{ destination_svm }}:",
            'source_path': "{{ source_svm }}:"
          }
        <<: *destination_login
      when:
        - svm_snapmirror is defined
        - svm_snapmirror.msg.records[0].state == "snapmirrored"
        - svm_snapmirror.msg.records[0].status == "transferring" 
        - svm_snapmirror.msg.num_records == 1
      register: abort
      tags: snapmirror_abort

    #'----------------------------------------------------------------------------
    #' Wait for SnapMirror Abort
    #' cluster2::> snapmirror show -destination-path vserver1_dr:
    #'----------------------------------------------------------------------------
    - name: Waiting for SnapMirror Abort
      netapp.ontap.na_ontap_rest_cli:
        <<: *destination_login
        command: 'snapmirror'
        verb: GET
        params:
         {
            'destination_path':  "{{ destination_svm }}:",
            'source_path': "{{ source_svm }}:",
            'fields': "status"
         }
      register: snapmirror_status
      until: snapmirror_status.msg.records[0].status == "idle" or svm_snapmirror.msg.records[0].status == "quiesced"
      retries: 600
      delay: 10
      tags: snapmirror_abort_wait

    #'----------------------------------------------------------------------------
    #' Update the SVM SnapMirror relationship.
    #' cluster1::> snapmirror break -destination-path vserver1: -source-path vserver1_dr:
    #'----------------------------------------------------------------------------

    - name: Update SnapMirror
      na_ontap_snapmirror:
        state: present
        relationship_state: active
        update: true
        source_endpoint:
          path: "{{ source_svm + ':' }}"
        destination_endpoint:
          path: "{{ destination_svm + ':' }}"
        <<: *destination_login
      when:
        - svm_snapmirror is defined
        - svm_snapmirror.msg.records[0].state == "snapmirrored" 
        - svm_snapmirror.msg.num_records == 1
      tags: snapmirror_break

    #'----------------------------------------------------------------------------
    #' Wait for SnapMirror Updates.
    #' cluster1::> snapmirror show -destination-path vserver1:
    #'----------------------------------------------------------------------------

    - name: Waiting for SnapMirror Updates
      netapp.ontap.na_ontap_rest_cli:
          <<: *destination_login
          command: 'snapmirror'
          verb: GET
          params:
            {
                'destination_path': "{{ destination_svm }}:",
                'source_path': "{{ source_svm }}:",
                'fields': "status"
            }
      register: snapmirror_status
      until: snapmirror_status.msg.records[0].status == "idle"
      retries: 600
      delay: 10
      tags: snapmirror_update_wait

    #'----------------------------------------------------------------------------
    #' Quiesce the SVM SnapMirror relationship.
    #' cluster1::> snapmirror quiesce -destination-path vserver1: -source-path vserver1_dr:
    #'----------------------------------------------------------------------------

    - name: Quiesce SnapMirror
      netapp.ontap.na_ontap_rest_cli:
        command: 'snapmirror/quiesce'
        verb: PATCH
        params:
          {
            'destination_path': "{{ destination_svm }}:",
            'source_path': "{{ source_svm }}:"
          }
        <<: *destination_login
      when:
        - svm_snapmirror is defined
        - svm_snapmirror.msg.records[0].status == "idle" or svm_snapmirror.msg.records[0].status == "quiesced"
        - svm_snapmirror.msg.records[0].state == "snapmirrored" 
        - svm_snapmirror.msg.num_records == 1
      tags: snapmirror_quiesce

    #'----------------------------------------------------------------------------
    #' Wait for SnapMirror Quiesce.
    #' cluster2::> snapmirror show -destination-path vserver2_dr:
    #'----------------------------------------------------------------------------

    - name: Waiting for SnapMirror Quiesce
      netapp.ontap.na_ontap_rest_cli:
        <<: *destination_login
        command: 'snapmirror'
        verb: GET
        params:
         {
            'destination_path':  "{{ destination_svm }}:",
            'source_path': "{{ source_svm }}:",
            'fields': "status"
         }
      register: snapmirror_status
      until: snapmirror_status.msg.records[0].status == "quiesced"
      retries: 600
      delay: 10
      tags: snapmirror_quiesce_wait
    

    #'----------------------------------------------------------------------------
    #' Break the SVM SnapMirror relationship.
    #' cluster1::> snapmirror break -destination-path vserver1: -source-path vserver1_dr:
    #'----------------------------------------------------------------------------
    - name: Break SnapMirror
      netapp.ontap.na_ontap_rest_cli:
        command: 'snapmirror/break'
        verb: PATCH
        params:
          {
            'destination_path': "{{ destination_svm }}:",
            'source_path': "{{ source_svm }}:"
          }
        <<: *destination_login
      when:
        - svm_snapmirror is defined
        - svm_snapmirror.msg.records[0].state == "snapmirrored" 
        - svm_snapmirror.msg.num_records == 1       
      tags: snapmirror_break

    #'----------------------------------------------------------------------------
    #' Wait until the SVM SnapMirror Relationship is in a 'broken-off' state.
    #' cluster1::> snapmirror show -destination-path vserver1:
    #'----------------------------------------------------------------------------

    - name: Waiting for SnapMirror to reach a Broken-Off State
      netapp.ontap.na_ontap_rest_cli:
        <<: *destination_login
        command: 'snapmirror'
        verb: GET
        params:
         {
            'destination_path':  "{{ destination_svm }}:",
            'source_path': "{{ source_svm }}:",
            'fields': "state"
         }
      register: snapmirror_status
      until: snapmirror_status.msg.records[0].state == "broken_off"
      retries: 600
      delay: 10
      tags: snapmirror_break_wait

    #'----------------------------------------------------------------------------
    #' Delete the SVM SnapMirror relationship.
    #' cluster1::> snapmirror delete -destination-path vserver1: -source-path vserver1_dr:
    #'----------------------------------------------------------------------------

    - name: Delete SnapMirror
      na_ontap_snapmirror:
        state: absent
        source_endpoint:
          path: "{{ source_svm  + ':' }}"
        destination_endpoint:
          path: "{{ destination_svm + ':' }}"
        <<: *destination_login
      when:
        - svm_snapmirror is defined
        - svm_snapmirror.msg.records[0].state == "snapmirrored" 
        - svm_snapmirror.msg.num_records == 1
      tags: snapmirror_delete

    #'----------------------------------------------------------------------------
    #' Start the production SVM.
    #' cluster1::> vserver start -vserver vserver1
    #'----------------------------------------------------------------------------

    - name: Start Production SVM
      netapp.ontap.na_ontap_svm:
        state: present
        name: "{{ destination_svm }}"
        admin_state: running
        <<: *destination_login
      when:
        - dr_svm is defined
        - dr_svm.ontap_info.svm_svms.records[0].state == "stopped"
        - dr_svm.ontap_info.svm_svms.num_records == 1
      tags: start_production_svm

    #'----------------------------------------------------------------------------
    #' Wait for production SVM to reach a running state.
    #' cluster1::> vserver show -vserver vserver1 -fields vserver, operational-state, admin-state
    #'----------------------------------------------------------------------------

    - name: Wait production SVM running
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
            - vserver_info
        use_python_keys: true
        parameters:
           name: "{{ destination_svm }}"
        fields:
         - state
        <<: *destination_login
      register: production_svm_state
      until: production_svm_state.ontap_info.svm_svms.records[0].state == "running"
      retries: 60
      delay: 5
      tags: wait_production_svm_running
